package net.sitecore.android.sdk.web;import android.content.Intent;import android.net.Uri;import android.text.TextUtils;import com.android.volley.RequestQueue;import com.android.volley.Response;import com.android.volley.VolleyError;import org.json.JSONException;import net.sitecore.android.sdk.api.RequestQueueProvider;import net.sitecore.android.sdk.api.ScApiSession;import net.sitecore.android.sdk.api.ScApiSessionFactory;import net.sitecore.android.sdk.api.UploadMediaRequestOptions;import net.sitecore.android.sdk.api.UploadMediaService;import net.sitecore.android.sdk.api.model.ItemsResponse;public class UploadMediaPlugin extends ScPlugin {    private ScCallbackContext mCallbackContext;    private Response.Listener<ItemsResponse> mSuccessListener = new Response.Listener<ItemsResponse>() {        @Override        public void onResponse(ItemsResponse response) {            if (response.getItems().size() == 1) mCallbackContext.sendSuccess();            else mCallbackContext.sendError("Failed to upload media.");        }    };    private Response.ErrorListener mErrorListener = new Response.ErrorListener() {        @Override        public void onErrorResponse(VolleyError error) {            mCallbackContext.sendError(new ScJavascriptError("Failed to upload media.", error.getMessage()));        }    };    @Override    public String getPluginName() {        return "contentapi";    }    @Override    public String getPluginJsCode() {        return IoUtils.readRawTextFile(mContext, R.raw.plugin_contentapi);    }    @Override    public void exec(String method, final ScParams params, ScCallbackContext callbackContext) throws JSONException {        mCallbackContext = callbackContext;        String login = params.getString("login");        String password = params.getString("password");        Uri instanceUri = Uri.parse(params.getString("instanceURL"));        String url = instanceUri.getScheme() + "://" + instanceUri.getHost() + ":" + instanceUri.getPort();        Response.Listener<ScApiSession> onSuccess = new Response.Listener<ScApiSession>() {            @Override            public void onResponse(final ScApiSession session) {                String compressionQuality = params.getString("compressionQuality");                final String imageUrl = params.getString("imageUrl");                if (!TextUtils.isEmpty(compressionQuality)) {                    CompressionHelper.OnCompressionFinishedCallback callback =                            new CompressionHelper.OnCompressionFinishedCallback() {                        @Override                        public void onCompressionFinished(String filePath) {                            startUpload(session, filePath, params);                        }                    };                    new CompressionHelper(mContext, callback).compress(imageUrl, compressionQuality);                } else {                    startUpload(session, imageUrl, params);                }            }        };        if (TextUtils.isEmpty(login) || TextUtils.isEmpty(password)) {            onSuccess.onResponse(ScApiSessionFactory.newAnonymousSession(url));        } else {            RequestQueue queue = RequestQueueProvider.getRequestQueue(mContext);            Response.ErrorListener onError = new Response.ErrorListener() {                @Override                public void onErrorResponse(VolleyError error) {                    mCallbackContext.sendError(error.getMessage());                }            };            ScApiSessionFactory.getSession(queue, url, login, password, onSuccess, onError);        }    }    private void startUpload(ScApiSession session, String itemUrl, ScParams params) {        final String itemPath = params.getString("path");        String itemName = params.getString("itemName");        String database = params.getString("database");        UploadMediaRequestOptions options = session.uploadMedia(itemPath, itemName, itemUrl);        options.setDatabase(database);        Intent intent = UploadMediaService.newUploadIntent(mContext, options, mSuccessListener, mErrorListener);        mContext.startService(intent);    }}